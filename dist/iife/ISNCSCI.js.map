{"version":3,"file":"ISNCSCI.js","sources":["../../../src/interfaces/Exam/Motor.ts","../../../src/interfaces/Exam/Sensory.ts","../../../src/classification/neurologicalLevels/sensoryLevel.ts","../../../src/classification/common.ts","../../../src/classification/neurologicalLevels/motorLevel.ts","../../../src/classification/neurologicalLevels/index.ts","../../node_modules/tslib/tslib.es6.js","../../../src/classification/zoneOfPartialPreservation/sensoryZPP.ts","../../../src/classification/zoneOfPartialPreservation/motorZPP.ts","../../../src/classification/zoneOfPartialPreservation/index.ts","../../../src/classification/neurologicalLevelOfInjury/neurologicalLevelOfInjury.ts","../../../src/classification/injuryComplete/injuryComplete.ts","../../../src/classification/asiaImpairmentScale/common.ts","../../../src/classification/asiaImpairmentScale/scale/A.ts","../../../src/classification/asiaImpairmentScale/scale/B.ts","../../../src/classification/asiaImpairmentScale/scale/C.ts","../../../src/classification/asiaImpairmentScale/scale/D.ts","../../../src/classification/asiaImpairmentScale/scale/E.ts","../../../src/classification/asiaImpairmentScale/asiaImpairmentScale.ts","../../../src/classification/index.ts","../../../src/totals/totals.ts","../../../src/ISNCSCI.ts"],"sourcesContent":["export type MotorMuscleValue =\r\n  '0' | '1' | '2' | '3' | '4' | '5' |\r\n  '0*' | '1*' | '2*' | '3*' | '4*' |\r\n  '0**' | '1**' | '2**' | '3**' | '4**' |\r\n  'NT' | 'NT*' | 'NT**';\r\n\r\nexport type MotorLevel = 'C5' | 'C6' | 'C7' | 'C8' | 'T1' | 'L2' | 'L3' | 'L4' | 'L5' | 'S1';\r\n\r\nexport const MotorLevels: MotorLevel[]  = [\r\n  'C5', 'C6', 'C7', 'C8', 'T1',\r\n  'L2', 'L3', 'L4', 'L5', 'S1',\r\n];\r\n\r\nexport interface Motor {\r\n  C5: MotorMuscleValue;\r\n  C6: MotorMuscleValue;\r\n  C7: MotorMuscleValue;\r\n  C8: MotorMuscleValue;\r\n  T1: MotorMuscleValue;\r\n\r\n  L2: MotorMuscleValue;\r\n  L3: MotorMuscleValue;\r\n  L4: MotorMuscleValue;\r\n  L5: MotorMuscleValue;\r\n  S1: MotorMuscleValue;\r\n}","export type SensoryPointValue =\r\n  '0' | '1' | '2' |\r\n  '0*' | '1*' |\r\n  '0**' | '1**' |\r\n  'NT' | 'NT*' | 'NT**';\r\n\r\nexport type SensoryLevel =\r\n  'C1' | 'C2' | 'C3' | 'C4' | 'C5' | 'C6' | 'C7' | 'C8' |\r\n  'T1' | 'T2' | 'T3' | 'T4' | 'T5' | 'T6' | 'T7' | 'T8' | 'T9' | 'T10' | 'T11' | 'T12' |\r\n  'L1' | 'L2' | 'L3' | 'L4' | 'L5'|\r\n  'S1' | 'S2' | 'S3' | 'S4_5';\r\n\r\nexport const SensoryLevels: SensoryLevel[] = [\r\n  'C1',\r\n  'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8',\r\n  'T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10', 'T11', 'T12',\r\n  'L1', 'L2', 'L3', 'L4', 'L5',\r\n  'S1', 'S2', 'S3', 'S4_5',\r\n]\r\nexport interface Sensory {\r\n  C2: SensoryPointValue;\r\n  C3: SensoryPointValue;\r\n  C4: SensoryPointValue;\r\n  C5: SensoryPointValue;\r\n  C6: SensoryPointValue;\r\n  C7: SensoryPointValue;\r\n  C8: SensoryPointValue;\r\n  T1: SensoryPointValue;\r\n  T2: SensoryPointValue;\r\n  T3: SensoryPointValue;\r\n  T4: SensoryPointValue;\r\n  T5: SensoryPointValue;\r\n  T6: SensoryPointValue;\r\n  T7: SensoryPointValue;\r\n  T8: SensoryPointValue;\r\n  T9: SensoryPointValue;\r\n  T10: SensoryPointValue;\r\n  T11: SensoryPointValue;\r\n  T12: SensoryPointValue;\r\n  L1: SensoryPointValue;\r\n  L2: SensoryPointValue;\r\n  L3: SensoryPointValue;\r\n  L4: SensoryPointValue;\r\n  L5: SensoryPointValue;\r\n  S1: SensoryPointValue;\r\n  S2: SensoryPointValue;\r\n  S3: SensoryPointValue;\r\n  S4_5: SensoryPointValue;\r\n}","import { ExamSide, SensoryPointValue, SensoryLevel, SensoryLevels } from '../../interfaces';\r\nimport { CheckLevelResult } from '../common';\r\n\r\nconst isAbnormalSensory = (value: SensoryPointValue): boolean => ['0','1','0*','1*'].includes(value);\r\nconst NTVariableSensory = (value: SensoryPointValue): boolean => ['0**','1**'].includes(value);\r\nconst NTNotVariableSensory = (value: SensoryPointValue): boolean => ['2','NT','NT**'].includes(value);\r\n\r\nexport const checkSensoryLevel = (side: ExamSide, level: SensoryLevel, nextLevel: SensoryLevel, variable: boolean): CheckLevelResult => {\r\n  if (nextLevel === 'C1') {\r\n    throw `invalid arguments level: ${level} nextLevel: ${nextLevel}`;\r\n  }\r\n\r\n  if (side.lightTouch[nextLevel] === '2' && side.pinPrick[nextLevel] === '2') {\r\n    return {continue: true, variable};\r\n  } else if (isAbnormalSensory(side.lightTouch[nextLevel]) || isAbnormalSensory(side.pinPrick[nextLevel])) {\r\n    return {continue: false, level: level + (variable ? '*' : ''), variable};\r\n  } else if ([side.lightTouch[nextLevel],side.pinPrick[nextLevel]].includes('NT*')) {\r\n    return {continue: false, level: level + '*', variable: true};\r\n  } else if (side.lightTouch[nextLevel] === 'NT' || side.pinPrick[nextLevel] === 'NT') {\r\n    if (NTVariableSensory(side.lightTouch[nextLevel]) || NTVariableSensory(side.pinPrick[nextLevel])) {\r\n      return {continue: true, level: level + (variable ? '*' : ''), variable: true};\r\n    } else if (NTNotVariableSensory(side.lightTouch[nextLevel]) || NTNotVariableSensory(side.pinPrick[nextLevel])) {\r\n      return {continue: true, level: level + (variable ? '*' : ''), variable};\r\n    } else {\r\n      throw '';\r\n    }\r\n  } else {\r\n    return {continue: true, variable: true};\r\n  }\r\n}\r\n\r\n/**\r\n * 1. step through each level\r\n *    a. If next PP and LT are both considered normal then continue to next level\r\n *    b. If next PP and LT contains NT and does not contain abnormal then add current level to list then continue to next level\r\n *    c. Else one of next PP and LT is altered then add current level to list then stop\r\n *       i. if next PP and LT both\r\n *    d. If reached last level (S4_5) then add current level to list\r\n * 2. return current list\r\n */\r\nexport const determineSensoryLevel = (side: ExamSide): string => {\r\n  const levels: string[] = [];\r\n  let variable = false;\r\n  for (let i = 0; i < SensoryLevels.length; i++) {\r\n    const level = SensoryLevels[i];\r\n    const nextLevel = SensoryLevels[i + 1];\r\n\r\n    if (nextLevel) {\r\n      const result = checkSensoryLevel(side, level, nextLevel, variable);\r\n      variable = variable || !!result.variable;\r\n      if (result.level) {\r\n        levels.push(result.level);\r\n      }\r\n      if (result.continue) {\r\n        continue;\r\n      } else {\r\n        break;\r\n      }\r\n    } else {\r\n      // reached end of SensoryLevels\r\n      levels.push('INT' + (variable ? '*' : ''));\r\n    }\r\n  }\r\n  return levels.join(',');\r\n}\r\n","import { SensoryPointValue, SensoryLevel, SensoryLevels } from \"../interfaces\";\r\n\r\nexport interface CheckLevelResult {\r\n  continue: boolean;\r\n  level?: string;\r\n  variable: boolean;\r\n}\r\n\r\n/**\r\n * `['0', 'NT', '0*', 'NT*'].includes(value)`\r\n */\r\nexport const canBeAbsentSensory = (value: SensoryPointValue): boolean => ['0', 'NT', '0*', 'NT*'].includes(value);\r\n\r\n/**\r\n * `['2','NT**','0**','1**'].includes(value)`\r\n */\r\nexport const isNormalSensory = (value: SensoryPointValue): boolean => ['2','NT**','0**','1**'].includes(value);\r\n\r\nexport const levelIsBetween = (index: number, firstLevel: SensoryLevel, lastLevel: SensoryLevel): boolean => {\r\n  return index >= SensoryLevels.indexOf(firstLevel) && index <= SensoryLevels.indexOf(lastLevel);\r\n};","import { ExamSide, MotorLevel, MotorLevels, SensoryLevel, SensoryLevels, BinaryObservation } from '../../interfaces';\r\nimport { checkSensoryLevel } from './sensoryLevel';\r\nimport { levelIsBetween, CheckLevelResult } from '../common';\r\n\r\nexport const checkMotorLevel = (side: ExamSide, level: MotorLevel, nextLevel: MotorLevel, variable: boolean): CheckLevelResult => {\r\n  if (['0','1','2'].includes(side.motor[level])) {\r\n    throw new Error(`Invalid motor value at current level`);\r\n  }\r\n\r\n  const result: CheckLevelResult = { continue: false, variable };\r\n\r\n  if (!['0','1','2'].includes(side.motor[level])) {\r\n    if (!['0*','1*','2*','NT*','3','4','3*','4*'].includes(side.motor[level])) {\r\n      if (!['0','1','2'].includes(side.motor[nextLevel])) {\r\n        result.continue = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!(['5','0**','1**','2**','3**','4**','NT**'].includes(side.motor[level]) && !['0','1','2','0*','1*','2*','NT','NT*'].includes(side.motor[nextLevel]))) {\r\n    if (\r\n      ['0*','1*','2*','NT*'].includes(side.motor[level]) || (\r\n        ['0**','1**','2**'].includes(side.motor[level]) && ['0*','1*','2*','NT','NT*'].includes(side.motor[nextLevel])\r\n      )\r\n    ) {\r\n      result.level = level + '*';\r\n    } else {\r\n      result.level = level + (variable ? '*' : '');\r\n    }\r\n  }\r\n\r\n  if (!['5','3','4','3*','4*','NT'].includes(side.motor[level])) {\r\n    if (['0**','1**','2**','3**','4**','NT**'].includes(side.motor[level])) {\r\n      if (!['0','1','2'].includes(side.motor[nextLevel])) {\r\n        result.variable = true;\r\n      }\r\n    } else {\r\n      result.variable = true;\r\n    }\r\n  } else if (side.motor[level] === '5' && ['0**','1**','2**'].includes(side.motor[nextLevel])) {\r\n    result.variable = true;\r\n  }\r\n\r\n  return result;\r\n}\r\nexport const checkMotorLevelBeforeStartOfKeyMuscles = (side: ExamSide, level: 'C4' | 'L1', nextLevel: MotorLevel, variable: boolean): CheckLevelResult => {\r\n  return {\r\n    continue: !['0','1','2'].includes(side.motor[nextLevel]),\r\n    level: ['0','1','2','0*','1*','2*','NT','NT*'].includes(side.motor[nextLevel]) ? level + (variable ? '*' : ''): undefined,\r\n    variable: variable || ['0**','1**','2**'].includes(side.motor[nextLevel]),\r\n  };\r\n}\r\n\r\nconst checkMotorLevelUsingSensoryValues = (side: ExamSide, firstMotorLevelOfMotorBlock: 'C5' | 'L2'): CheckLevelResult => {\r\n  const startIndex = SensoryLevels.indexOf(firstMotorLevelOfMotorBlock) - 1;\r\n  const result: CheckLevelResult = {continue: true, variable: false};\r\n  for (let i = startIndex; i <= startIndex + 5; i++) {\r\n    const level = SensoryLevels[i];\r\n    const nextLevel = SensoryLevels[i + 1];\r\n    const currentLevelResult = checkSensoryLevel(side, level, nextLevel, false);\r\n\r\n    if (currentLevelResult.continue === false) {\r\n      result.continue = false;\r\n    }\r\n    if (currentLevelResult.level) {\r\n      result.level = currentLevelResult.level;\r\n    }\r\n    if (currentLevelResult.variable) {\r\n      result.variable = true;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const checkWithSensoryCheckLevelResult = (side: ExamSide, level: 'T1' | 'S1', variable: boolean, sensoryCheckLevelResult: CheckLevelResult): CheckLevelResult => {\r\n  const result: CheckLevelResult = {continue:true, variable};\r\n\r\n  if (\r\n    (['3','4','0*','1*','2*','3*','4*','NT*'].includes(side.motor[level]) || !sensoryCheckLevelResult.continue)\r\n  ) {\r\n    result.continue = false;\r\n  }\r\n\r\n  if (side.motor[level] === 'NT' || !(['5','0**','1**','2**','3**','4**','NT**'].includes(side.motor[level]) && sensoryCheckLevelResult.continue && !sensoryCheckLevelResult.level)) {\r\n    if (\r\n      ['0*','1*','2*','NT*'].includes(side.motor[level]) ||\r\n      (\r\n        ['0**','1**','2**'].includes(side.motor[level]) &&\r\n        (sensoryCheckLevelResult.level || !sensoryCheckLevelResult.continue)\r\n      )\r\n    ) {\r\n      result.level = level + '*';\r\n    } else {\r\n      result.level = level + (variable ? '*' : '');\r\n    }\r\n  }\r\n\r\n  if (\r\n    ['0*','1*','2*','NT*','0**','1**','2**'].includes(side.motor[level]) || (\r\n      ['3**','4**','NT**'].includes(side.motor[level]) && sensoryCheckLevelResult.continue\r\n    ) || (\r\n      ['5','NT'].includes(side.motor[level]) &&\r\n      (sensoryCheckLevelResult.continue && sensoryCheckLevelResult.variable && !sensoryCheckLevelResult.level)\r\n    )\r\n  ) {\r\n    result.variable = true;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport const checkMotorLevelAtEndOfKeyMuscles = (side: ExamSide, level: 'T1' | 'S1', variable: boolean): CheckLevelResult => {\r\n  if (['0','1','2'].includes(side.motor[level])) {\r\n    throw new Error(`Invalid motor value at current level`);\r\n  }\r\n\r\n  const firstMotorLevelOfMotorBlock = level === 'T1' ? 'C5' : 'L2';\r\n  const sensoryCheckLevelResult = checkMotorLevelUsingSensoryValues(side, firstMotorLevelOfMotorBlock);\r\n\r\n  return checkWithSensoryCheckLevelResult(side, level, variable, sensoryCheckLevelResult);\r\n}\r\n\r\n/** TODO\r\n * 1. step through each level\r\n *    a. ...\r\n * 2. return current list\r\n */\r\nexport const determineMotorLevel = (side: ExamSide, vac: BinaryObservation): string => {\r\n  const levels: string[] = [];\r\n  let level: SensoryLevel | MotorLevel;\r\n  let nextLevel: SensoryLevel | MotorLevel;\r\n  let result;\r\n  let variable = false;\r\n  for (let i = 0; i < SensoryLevels.length; i++) {\r\n    level = SensoryLevels[i];\r\n    nextLevel = SensoryLevels[i + 1];\r\n    // check sensory\r\n    if (levelIsBetween(i,'C1','C3') || levelIsBetween(i,'T2','T12') || levelIsBetween(i,'S2','S3')) {\r\n      result = checkSensoryLevel(side, level, nextLevel, variable);\r\n    }\r\n    // check before key muscles\r\n    else if (level === 'C4' || level === 'L1') {\r\n      nextLevel = level === 'C4' ? 'C5' : 'L2'\r\n      result = checkMotorLevelBeforeStartOfKeyMuscles(side, level, nextLevel, variable);\r\n    }\r\n    // check motor\r\n    else if (levelIsBetween(i,'C5','C8') || levelIsBetween(i,'L2','L5')) {\r\n      // level = C5 to C8\r\n      const index = i - (levelIsBetween(i,'C5','C8') ? 4 : 16);\r\n      level = MotorLevels[index];\r\n      nextLevel = MotorLevels[index + 1];\r\n      result = checkMotorLevel(side, level, nextLevel, variable);\r\n    }\r\n    // check at end of key muscles\r\n    else if (level === 'T1' || level === 'S1') {\r\n      result = checkMotorLevelAtEndOfKeyMuscles(side, level, variable);\r\n    } else {\r\n      if (vac === 'No') {\r\n        if ((levels.includes('S3') || levels.includes('S3*'))) {\r\n          break;\r\n        } else {\r\n          result = {continue: false, level: 'S3' + (variable ? '*' : ''), variable};\r\n        }\r\n      } else if (vac === 'NT') {\r\n        if ((levels.includes('S3') || levels.includes('S3*'))) {\r\n          result = {continue: false, level: 'INT' + (variable ? '*' : ''), variable};\r\n        } else {\r\n          levels.push('S3' + (variable ? '*' : ''));\r\n          result = {continue: false, level: 'INT' + (variable ? '*' : ''), variable};\r\n        }\r\n      } else {\r\n        result = {continue: false, level: 'INT' + (variable ? '*' : ''), variable};\r\n      }\r\n    }\r\n    variable = variable || result.variable;\r\n    if (result.level) {\r\n      levels.push(result.level);\r\n    }\r\n    if (result.continue) {\r\n      continue;\r\n    } else {\r\n      return levels.join(',');\r\n    }\r\n  }\r\n\r\n  return levels.join(',');\r\n}","import { Exam, NeurologicalLevels } from '../../interfaces';\r\nimport { determineSensoryLevel } from \"./sensoryLevel\";\r\nimport { determineMotorLevel } from './motorLevel';\r\n\r\nexport const determineNeurologicalLevels = (exam: Exam): NeurologicalLevels => {\r\n  const sensoryRight = determineSensoryLevel(exam.right);\r\n  const sensoryLeft = determineSensoryLevel(exam.left);\r\n  const motorRight = determineMotorLevel(exam.right, exam.voluntaryAnalContraction);\r\n  const motorLeft = determineMotorLevel(exam.left, exam.voluntaryAnalContraction);\r\n  return { sensoryRight, sensoryLeft, motorRight, motorLeft };\r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { BinaryObservation, ExamSide, SensoryPointValue, SensoryLevels, SensoryLevel } from \"../../interfaces\";\r\nimport { canBeAbsentSensory, CheckLevelResult } from \"../common\";\r\n\r\nconst isAbsentSensory = (value: SensoryPointValue): boolean => value === '0';\r\n\r\nexport const checkLevelForSensoryZPP = (side: ExamSide, level: SensoryLevel, variable: boolean): CheckLevelResult=> {\r\n  if (level === 'C1') {\r\n    throw `invalid argument level: ${level}`;\r\n  }\r\n  const currentLevelPinPrickIsAbsent = isAbsentSensory(side.pinPrick[level]);\r\n  const currentLevelLightTouchIsAbsent = isAbsentSensory(side.lightTouch[level]);\r\n\r\n  if (currentLevelPinPrickIsAbsent && currentLevelLightTouchIsAbsent) {\r\n    // TODO: remove hard coded variable\r\n    return {continue: true, variable};\r\n  }\r\n\r\n  if (!canBeAbsentSensory(side.pinPrick[level]) || !canBeAbsentSensory(side.lightTouch[level])) {\r\n    // TODO: remove hard coded variable\r\n    return {continue: false, level: level + (variable ? '*' : ''), variable};\r\n  } else {\r\n    // TODO: remove hard coded variable\r\n    const foundSomeNT = [side.pinPrick[level],side.lightTouch[level]].some(v => ['NT', 'NT*'].includes(v));\r\n    if (foundSomeNT) {\r\n      return {continue: true, level: level + (variable ? '*' : ''), variable};\r\n    } else {\r\n      return {continue: true, level: level + '*', variable: variable || !foundSomeNT};\r\n    }\r\n  }\r\n}\r\n\r\nexport const determineSensoryZPP = (side: ExamSide, deepAnalPressure: BinaryObservation): string => {\r\n  let zpp = [];\r\n  let variable = false;\r\n  if ((deepAnalPressure === 'No' || deepAnalPressure === 'NT') && canBeAbsentSensory(side.lightTouch.S4_5) && canBeAbsentSensory(side.pinPrick.S4_5)) {\r\n    const sacralResult = checkLevelForSensoryZPP(side, 'S4_5', variable);\r\n    if (\r\n      deepAnalPressure === 'NT' ||\r\n      (deepAnalPressure === 'No' && (!sacralResult.continue || sacralResult.level !== undefined))\r\n    ) {\r\n      zpp.push('NA');\r\n    }\r\n\r\n    const levels: string[] = [];\r\n    for (let i = SensoryLevels.indexOf('S3'); i >= 0; i--) {\r\n      const level = SensoryLevels[i];\r\n\r\n      // if not level !== C1\r\n      if (i > 0) {\r\n        const result = checkLevelForSensoryZPP(side, level, variable);\r\n        variable = variable || result.variable;\r\n        if (result.level) {\r\n          levels.unshift(result.level);\r\n        }\r\n        if (result.continue) {\r\n          continue;\r\n        } else {\r\n          break;\r\n        }\r\n      } else {\r\n        // reached end of SensoryLevels\r\n        levels.unshift(level);\r\n      }\r\n    }\r\n    zpp = [...zpp, ...levels];\r\n    return zpp.join(',');\r\n  } else {\r\n    return 'NA';\r\n  }\r\n}","import { BinaryObservation, ExamSide, MotorMuscleValue, MotorLevel, MotorLevels, SensoryPointValue, SensoryLevel, SensoryLevels } from \"../../interfaces\";\r\nimport { levelIsBetween, CheckLevelResult, isNormalSensory } from \"../common\";\r\n\r\n/**\r\n * `['NT', '0*', 'NT*'].includes(value)`\r\n */\r\n// const canBeTotalParalysisMotor = (value: MotorMuscleValue): boolean => ['NT', '0*', 'NT*'].includes(value);\r\n/**\r\n * `['5', 'NT', '0**', '1**', '2**', '3**', '4**', 'NT**'].includes(value)`\r\n */\r\nconst isNormalMotor = (value: MotorMuscleValue): boolean => ['5', '0**', '1**', '2**', '3**', '4**', 'NT**'].includes(value);\r\n/**\r\n * `['5', 'NT', '0**', '1**', '2**', '3**', '4**', 'NT**'].includes(value)`\r\n */\r\nconst canBeNormalMotor = (value: MotorMuscleValue): boolean => ['5', 'NT', '0**', '1**', '2**', '3**', '4**', 'NT**'].includes(value);\r\n/**\r\n * `['0', '0*', 'NT', 'NT*'].includes(value)`\r\n */\r\nconst canBeParalyzedMotor = (value: MotorMuscleValue): boolean => ['0', '0*', 'NT', 'NT*'].includes(value);\r\n/**\r\n * `['2', 'NT', '0**', '1**', 'NT**'].includes(value)`\r\n */\r\nconst canBeNormalSensory = (value: SensoryPointValue): boolean => ['2', 'NT', '0**', '1**', 'NT**'].includes(value);\r\n\r\nexport const checkLevelForMotorZPP = (side: ExamSide, level: MotorLevel, variable: boolean): CheckLevelResult => {\r\n  const result: CheckLevelResult = {continue: true, variable};\r\n  if (side.motor[level] === '0') {\r\n    return result;\r\n  }\r\n\r\n  if (!['0*','NT','NT*'].includes(side.motor[level])) {\r\n    result.continue = false;\r\n  }\r\n\r\n  if (['0*','0**'].includes(side.motor[level])) {\r\n    result.level = level + '*';\r\n  } else {\r\n    result.level = level + (variable? '*' : '');\r\n  }\r\n\r\n  if (['0*','0**'].includes(side.motor[level])) {\r\n    result.variable = true;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const checkLevelForMotorZPPOnSensory = (side: ExamSide, level: SensoryLevel, variable: boolean, extremityIsAllNormal: boolean, extremityCanBeAllNormal: boolean, extremityCanBeAllParalyzed: boolean): CheckLevelResult => {\r\n  if (level === 'C1') {\r\n    throw `invalid argument level: ${level}`;\r\n  }\r\n  const result: CheckLevelResult = {\r\n    continue: true,\r\n    variable: false,\r\n  }\r\n  const canBeNormalLightTouch = canBeNormalSensory(side.lightTouch[level]);\r\n  const canBeNormalPinPrick = canBeNormalSensory(side.pinPrick[level]);\r\n\r\n  if (canBeNormalLightTouch && canBeNormalPinPrick) {\r\n    if (extremityCanBeAllNormal) {\r\n      if (extremityIsAllNormal || extremityCanBeAllParalyzed || side.lightTouch[level] === 'NT' || side.pinPrick[level] === 'NT') {\r\n        result.level = level + (variable ? '*' : '');\r\n        if (extremityIsAllNormal && side.lightTouch[level] !== 'NT' && side.pinPrick[level] !== 'NT') {\r\n          result.continue = false;\r\n        }\r\n      }\r\n      return result;\r\n    } else if (side.lightTouch[level] !== 'NT' || side.pinPrick[level] !== 'NT') {\r\n      return {continue: true, variable};\r\n    }\r\n\r\n    if (side.lightTouch[level] === 'NT' || side.pinPrick[level] === 'NT') {\r\n      return {continue: true, level: level + (variable ? '*' : ''), variable};\r\n    } else {\r\n      return {continue: false, level: level + (variable ? '*' : ''), variable};\r\n    }\r\n  } else {\r\n    return {continue: true, variable};\r\n  }\r\n}\r\n\r\nconst checkLowestNonKeyMuscleWithMotorFunction = (levels: string[], lowestNonKeyMuscleWithMotorFunction: MotorLevel, startingIndex: number): boolean => {\r\n  if (SensoryLevels.indexOf(lowestNonKeyMuscleWithMotorFunction) > startingIndex) {\r\n    const indexes = levels.map(s => SensoryLevels.indexOf(s.replace(/\\*/, '') as SensoryLevel));\r\n    const lowestNonKeyMuscleWithMotorFunctionIndex = SensoryLevels.indexOf(lowestNonKeyMuscleWithMotorFunction);\r\n    return indexes.every(i => i <= lowestNonKeyMuscleWithMotorFunctionIndex);\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst getCanBeConsecutivelyBeNormalDownTo = (side: ExamSide): CheckLevelResult => {\r\n  const result = { continue: true, level: 'S4_5', variable: false }\r\n  for (let i = SensoryLevels.indexOf('C2'); i < SensoryLevels.length; i++) {\r\n    if (levelIsBetween(i,'C5','T1') || levelIsBetween(i,'L2','S1')) {\r\n      const index = i - (levelIsBetween(i,'C5','T1') ? 4 : 16);\r\n      const level = MotorLevels[index];\r\n      if (side.motor[level] === '0**' || ['0**', '1**', 'NT**'].includes(side.lightTouch[level]) || ['0**', '1**', 'NT**'].includes(side.pinPrick[level])) {\r\n        result.variable = true;\r\n      }\r\n      if (!canBeNormalMotor(side.motor[level]) || !canBeNormalSensory(side.lightTouch[level]) || !canBeNormalSensory(side.pinPrick[level])) {\r\n        result.level = SensoryLevels[i - 1];\r\n        break;\r\n      }\r\n    } else {\r\n      const level = SensoryLevels[i];\r\n      if (level === 'C1') {\r\n        throw `invalid argument level: ${level}`;\r\n      }\r\n      if (['0**', '1**', 'NT**'].includes(side.lightTouch[level]) || ['0**', '1**', 'NT**'].includes(side.pinPrick[level])) {\r\n        result.variable = true;\r\n      }\r\n      if (!canBeNormalSensory(side.lightTouch[level]) || !canBeNormalSensory(side.pinPrick[level])) {\r\n        result.level = SensoryLevels[i - 1];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nconst isAllNormalExtremity = (side: ExamSide, option: 'lower' | 'upper'): boolean => {\r\n  let startingMotorIndex, startingSensoryIndex;\r\n  switch (option) {\r\n    case 'upper':\r\n      startingMotorIndex = MotorLevels.indexOf('C5');\r\n      startingSensoryIndex = SensoryLevels.indexOf('C5');\r\n      break;\r\n    case 'lower':\r\n      startingMotorIndex = MotorLevels.indexOf('L2');\r\n      startingSensoryIndex = SensoryLevels.indexOf('L2');\r\n      break;\r\n    default:\r\n      throw 'invalid option';\r\n  }\r\n\r\n  for (let i = startingMotorIndex; i < startingMotorIndex + 5; i++) {\r\n    const level = MotorLevels[i];\r\n    if (!isNormalMotor(side.motor[level])) {\r\n      return false;\r\n    }\r\n  }\r\n  for (let i = startingSensoryIndex; i < startingSensoryIndex + 5; i++) {\r\n    const level = SensoryLevels[i];\r\n    if (level === 'C1' || !isNormalSensory(side.pinPrick[level]) || !isNormalSensory(side.lightTouch[level])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst canBeAllNormalExtremity = (side: ExamSide, option: 'lower' | 'upper'): boolean => {\r\n  let startingIndex, startingSensoryIndex;\r\n  switch (option) {\r\n    case 'upper':\r\n      startingIndex = MotorLevels.indexOf('C5');\r\n      startingSensoryIndex = SensoryLevels.indexOf('C5');\r\n      break;\r\n    case 'lower':\r\n      startingIndex = MotorLevels.indexOf('L2');\r\n      startingSensoryIndex = SensoryLevels.indexOf('L2');\r\n      break;\r\n    default:\r\n      throw 'invalid option';\r\n  }\r\n\r\n  for (let i = startingIndex; i < startingIndex + 5; i++) {\r\n    const level = MotorLevels[i];\r\n    if (!canBeNormalMotor(side.motor[level])) {\r\n      return false;\r\n    }\r\n  }\r\n  for (let i = startingSensoryIndex; i < startingSensoryIndex + 5; i++) {\r\n    const level = SensoryLevels[i];\r\n    if (level === 'C1' || !canBeNormalSensory(side.pinPrick[level]) || !canBeNormalSensory(side.lightTouch[level])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst canBeAllParalyzedExtremity = (side: ExamSide, option: 'lower' | 'upper'): boolean => {\r\n  let startingIndex;\r\n  switch (option) {\r\n    case 'upper':\r\n      startingIndex = MotorLevels.indexOf('C5');\r\n      break;\r\n    case 'lower':\r\n      startingIndex = MotorLevels.indexOf('L2');\r\n      break;\r\n    default:\r\n      throw 'invalid option';\r\n  }\r\n\r\n  for (let i = startingIndex; i < startingIndex + 5; i++) {\r\n    const level = MotorLevels[i];\r\n    if (!canBeParalyzedMotor(side.motor[level])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst hasImpairedExtremity = (side: ExamSide, option: 'lower' | 'upper'): boolean => {\r\n  let startingIndex;\r\n  switch (option) {\r\n    case 'upper':\r\n      startingIndex = MotorLevels.indexOf('C5');\r\n      break;\r\n    case 'lower':\r\n      startingIndex = MotorLevels.indexOf('L2');\r\n      break;\r\n    default:\r\n      throw 'invalid option';\r\n  }\r\n\r\n  for (let i = startingIndex; i < startingIndex + 5; i++) {\r\n    const level = MotorLevels[i];\r\n    if (['0','1','2','3','4','0*','1*','2*','3*','4*'].includes(side.motor[level])) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nconst findStartingIndex = (side: ExamSide): number => {\r\n  for (let i = MotorLevels.length - 1; i >= 0; i--) {\r\n    const level = MotorLevels[i];\r\n    if (side.motor[level] !== '0') {\r\n      if (level === 'S1') {\r\n        return SensoryLevels.indexOf('S3');\r\n      } else if (level === 'T1') {\r\n        return SensoryLevels.indexOf('L1');\r\n      } else {\r\n        return SensoryLevels.indexOf(level);\r\n      }\r\n    }\r\n  }\r\n  return SensoryLevels.indexOf('S3');\r\n}\r\n\r\n// contains side-effect code for result and levels\r\nconst checkMotorsOnly = (side: ExamSide, levels: string[], result: CheckLevelResult, option: 'upper' | 'lower'): number => {\r\n  let startingIndex = -1;\r\n  let variable = false;\r\n  const startingMotorIndex = option === 'upper' ? MotorLevels.indexOf('T1') : MotorLevels.length - 1;\r\n  const endingMotorIndex = option === 'upper' ? 0 : MotorLevels.indexOf('L2');\r\n  for (let i = startingMotorIndex; i >= endingMotorIndex; i--) {\r\n    const level = MotorLevels[i];\r\n    result = checkLevelForMotorZPP(side, level, variable);\r\n    variable = variable || result.variable;\r\n    if (result.level) {\r\n      levels.unshift(result.level);\r\n    }\r\n    if (!result.continue) {\r\n      startingIndex = -1;\r\n      break;\r\n    } else {\r\n      startingIndex = SensoryLevels.indexOf(level);\r\n    }\r\n  }\r\n  return startingIndex;\r\n}\r\n\r\n/**\r\n * TODO\r\n * 1. Check VAC value and S4_5 values\r\n * 2. Check Lower motor values\r\n *   a. if can be normal check\r\n *\r\n * @param side\r\n * @param voluntaryAnalContraction\r\n */\r\nexport const determineMotorZPP = (side: ExamSide, voluntaryAnalContraction: BinaryObservation, ais: string): string => {\r\n  if (voluntaryAnalContraction === 'Yes') {\r\n    return 'NA';\r\n  } else {\r\n    let zpp = [];\r\n\r\n    const canBeConsecutivelyBeNormalDownTo = getCanBeConsecutivelyBeNormalDownTo(side);\r\n    const upperExtremityIsAllNormal = isAllNormalExtremity(side, 'upper');\r\n    const lowerExtremityIsAllNormal = isAllNormalExtremity(side, 'lower');\r\n    const upperExtremityCanBeAllNormal = canBeAllNormalExtremity(side, 'upper');\r\n    const lowerExtremityCanBeAllNormal = canBeAllNormalExtremity(side, 'lower');\r\n    let upperExtremityCanBeAllParalyzed = canBeAllParalyzedExtremity(side, 'upper');\r\n    let lowerExtremityCanBeAllParalyzed = canBeAllParalyzedExtremity(side, 'lower');\r\n\r\n    const levels: string[] = [];\r\n    let level: SensoryLevel | MotorLevel;\r\n    // TODO: remove hard coded variable\r\n    let result: CheckLevelResult = {continue: true, variable: false};\r\n    if (\r\n      voluntaryAnalContraction === 'NT'\r\n    ) {\r\n      zpp.push('NA');\r\n      result = checkLevelForMotorZPPOnSensory(\r\n        side,\r\n        'S4_5',\r\n        false,\r\n        lowerExtremityIsAllNormal,\r\n        upperExtremityCanBeAllNormal && lowerExtremityCanBeAllNormal,\r\n        false\r\n      );\r\n    }\r\n\r\n    let startingIndex = findStartingIndex(side);\r\n    let variable = canBeConsecutivelyBeNormalDownTo.variable;\r\n    if (hasImpairedExtremity(side, 'lower') || hasImpairedExtremity(side, 'upper')) {\r\n      // only check motor levels\r\n      startingIndex = checkMotorsOnly(side, levels, result, 'lower');\r\n    }\r\n    if (startingIndex >= 0 && hasImpairedExtremity(side, 'upper')) {\r\n      // only check motor levels\r\n      startingIndex = checkMotorsOnly(side, levels, result, 'upper');\r\n    }\r\n\r\n    if (\r\n      side.lowestNonKeyMuscleWithMotorFunction && (ais === 'C' || ais === 'C*') &&\r\n      checkLowestNonKeyMuscleWithMotorFunction(levels, side.lowestNonKeyMuscleWithMotorFunction, startingIndex)\r\n    ) {\r\n      return [...zpp,side.lowestNonKeyMuscleWithMotorFunction].join(',');\r\n    }\r\n\r\n    console.log(startingIndex, SensoryLevels.indexOf('S3'))\r\n\r\n    // start iteration from bottom\r\n    for (let i = startingIndex; i >= 0; i--) {\r\n      if (!result.continue) {\r\n        break;\r\n      }\r\n      level = SensoryLevels[i];\r\n      // check sensory\r\n      if (levelIsBetween(i,'C2','C4')) {\r\n        result = checkLevelForMotorZPPOnSensory(\r\n          side,\r\n          level,\r\n          variable,\r\n          true,\r\n          true,\r\n          upperExtremityCanBeAllParalyzed\r\n        );\r\n        if (result.level) {\r\n          upperExtremityCanBeAllParalyzed = false;\r\n        }\r\n      } else if (levelIsBetween(i,'T2','L1')) {\r\n        result = checkLevelForMotorZPPOnSensory(\r\n          side,\r\n          level,\r\n          variable,\r\n          upperExtremityIsAllNormal,\r\n          upperExtremityCanBeAllNormal,\r\n          lowerExtremityCanBeAllParalyzed\r\n        );\r\n        if (result.level) {\r\n          lowerExtremityCanBeAllParalyzed = false;\r\n        }\r\n      } else if (levelIsBetween(i,'S2','S3')) {\r\n        result = checkLevelForMotorZPPOnSensory(\r\n          side,\r\n          level,\r\n          variable,\r\n          lowerExtremityIsAllNormal,\r\n          upperExtremityCanBeAllNormal && lowerExtremityCanBeAllNormal,\r\n          false\r\n        );\r\n        if (level === 'S3' && isNormalSensory(side.lightTouch.S4_5) && isNormalSensory(side.pinPrick.S4_5)) {\r\n          result.level = 'S3';\r\n        }\r\n      }\r\n      // check motor\r\n      else if (levelIsBetween(i,'C5','T1') || levelIsBetween(i,'L2','S1')) {\r\n        if ((ais === 'C' || ais === 'C*') && level === side.lowestNonKeyMuscleWithMotorFunction) {\r\n          levels.unshift(level);\r\n          break;\r\n        }\r\n        // level = C5 to C8\r\n        const index = i - (levelIsBetween(i,'C5','T1') ? 4 : 16);\r\n        level = MotorLevels[index];\r\n        result = checkLevelForMotorZPP(side, level, variable);\r\n      }\r\n      // level = C1\r\n      else {\r\n        // TODO: remove hard coded variable\r\n        result = {continue: false, level: 'C1', variable: false};\r\n      }\r\n\r\n      if (result.level) {\r\n        levels.unshift(result.level);\r\n      }\r\n\r\n      variable = variable || result.variable;\r\n    }\r\n\r\n    zpp = [...zpp, ...levels.sort((a, b) => SensoryLevels.indexOf(a.replace(/\\*/, '') as SensoryLevel) - SensoryLevels.indexOf(b.replace(/\\*/, '') as SensoryLevel))];\r\n    return zpp.join(',');\r\n  }\r\n}","import { Exam, ZoneOfPartialPreservations } from '../../interfaces';\r\nimport { determineSensoryZPP } from \"./sensoryZPP\";\r\nimport { determineMotorZPP } from './motorZPP';\r\n\r\nexport const determineZoneOfPartialPreservations = (exam: Exam, ASIAImpairmentScale: string): ZoneOfPartialPreservations => {\r\n  const sensoryRight = determineSensoryZPP(exam.right, exam.deepAnalPressure);\r\n  const sensoryLeft = determineSensoryZPP(exam.left, exam.deepAnalPressure);\r\n  const motorRight = determineMotorZPP(exam.right, exam.voluntaryAnalContraction, ASIAImpairmentScale);\r\n  const motorLeft = determineMotorZPP(exam.left, exam.voluntaryAnalContraction, ASIAImpairmentScale);\r\n  return {sensoryRight, sensoryLeft, motorRight, motorLeft};\r\n}","import { Exam, MotorLevels, SensoryLevel, SensoryLevels } from \"../../interfaces\";\r\nimport { levelIsBetween, CheckLevelResult } from \"../common\";\r\nimport { checkSensoryLevel } from \"../neurologicalLevels/sensoryLevel\";\r\nimport { checkMotorLevel, checkMotorLevelBeforeStartOfKeyMuscles } from \"../neurologicalLevels/motorLevel\";\r\n\r\nexport const checkLevelWithoutMotor = (level: SensoryLevel, leftSensoryResult: CheckLevelResult, rightSensoryResult: CheckLevelResult, variable: boolean): CheckLevelResult => {\r\n  let resultLevel;\r\n  if (leftSensoryResult.level || rightSensoryResult.level) {\r\n    if (\r\n      leftSensoryResult.level && rightSensoryResult.level &&\r\n      leftSensoryResult.level.includes('*') && rightSensoryResult.level.includes('*')\r\n    ) {\r\n      resultLevel = level + '*';\r\n    } else {\r\n      resultLevel = level + (variable ? '*' : '');\r\n    }\r\n  }\r\n  return {\r\n    continue: leftSensoryResult.continue && rightSensoryResult.continue,\r\n    level: resultLevel,\r\n    variable: variable || leftSensoryResult.variable || rightSensoryResult.variable,\r\n  }\r\n}\r\n\r\nexport const checkLevelWithMotor = (exam: Exam, level: SensoryLevel, sensoryResult: CheckLevelResult, variable: boolean): CheckLevelResult => {\r\n  if (!sensoryResult.continue) {\r\n    return sensoryResult;\r\n  } else {\r\n    const i = SensoryLevels.indexOf(level);\r\n    const index = i - (levelIsBetween(i,'C4','T1') ? 4 : 16);\r\n    const motorLevel = MotorLevels[index];\r\n    const nextMotorLevel = MotorLevels[index + 1];\r\n\r\n    const leftMotorResult = level === 'C4' || level === 'L1' ?\r\n      checkMotorLevelBeforeStartOfKeyMuscles(exam.left, level, nextMotorLevel, variable) :\r\n      level === 'T1' || level === 'S1' ?\r\n        checkMotorLevel(exam.left, motorLevel, motorLevel, variable) :\r\n        checkMotorLevel(exam.left, motorLevel, nextMotorLevel, variable);\r\n    const rightMotorResult = level === 'C4' || level === 'L1' ?\r\n      checkMotorLevelBeforeStartOfKeyMuscles(exam.left, level, nextMotorLevel, variable) :\r\n      level === 'T1' || level === 'S1' ?\r\n        checkMotorLevel(exam.right, motorLevel, motorLevel, variable) : // TODO: hot fix\r\n        checkMotorLevel(exam.right, motorLevel, nextMotorLevel, variable);\r\n\r\n    let resultLevel;\r\n    if (leftMotorResult.level || rightMotorResult.level || sensoryResult.level) {\r\n      if (\r\n        leftMotorResult.level && rightMotorResult.level &&\r\n        leftMotorResult.level.includes('*') && rightMotorResult.level.includes('*')\r\n      ) {\r\n        resultLevel = level + '*';\r\n      } else {\r\n        resultLevel = level + (variable ? '*' : '');\r\n      }\r\n    }\r\n    return {\r\n      continue: leftMotorResult.continue && rightMotorResult.continue,\r\n      level: resultLevel,\r\n      variable: variable || sensoryResult.variable || leftMotorResult.variable || rightMotorResult.variable,\r\n    }\r\n  }\r\n}\r\n\r\nexport const determineNeurologicalLevelOfInjury = (exam: Exam): string => {\r\n  const listOfNLI = [];\r\n  let variable = false;\r\n  for (let i = 0; i < SensoryLevels.length; i++) {\r\n    const level = SensoryLevels[i];\r\n    const nextLevel = SensoryLevels[i + 1];\r\n    let result: CheckLevelResult = {\r\n      continue: true,\r\n      variable: false,\r\n    };\r\n    if (!nextLevel) {\r\n      listOfNLI.push('INT' + (variable ? '*' : ''));\r\n    } else {\r\n      const leftSensoryResult = checkSensoryLevel(exam.left, level, nextLevel, variable);\r\n      const rightSensoryResult = checkSensoryLevel(exam.right, level, nextLevel, variable);\r\n      if (levelIsBetween(i,'C4','T1') || levelIsBetween(i,'L1','S1')) {\r\n        const sensoryResult = checkLevelWithoutMotor(level, leftSensoryResult, rightSensoryResult, variable);\r\n        result = checkLevelWithMotor(exam, level, sensoryResult, variable);\r\n      } else {\r\n        result = checkLevelWithoutMotor(level, leftSensoryResult, rightSensoryResult, variable);\r\n      }\r\n      variable = variable || result.variable;\r\n      if (result.level) {\r\n        listOfNLI.push(result.level);\r\n      }\r\n      if (!result.continue) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return listOfNLI.join(',');\r\n}\r\n","import { Exam, InjuryComplete } from \"../../interfaces\";\r\nimport { canBeAbsentSensory } from \"../common\";\r\n\r\nexport const determineInjuryComplete = (exam: Exam): InjuryComplete => {\r\n  const rightLightTouchCanBeAbsent = canBeAbsentSensory(exam.right.lightTouch.S4_5);\r\n  const rightPinPrickCanBeAbsent = canBeAbsentSensory(exam.right.pinPrick.S4_5);\r\n  const leftLightTouchCanBeAbsent = canBeAbsentSensory(exam.left.lightTouch.S4_5);\r\n  const leftPinPrickCanBeAbsent = canBeAbsentSensory(exam.left.pinPrick.S4_5);\r\n\r\n  if (\r\n    exam.voluntaryAnalContraction !== 'Yes' && exam.deepAnalPressure !== 'Yes' &&\r\n    rightLightTouchCanBeAbsent && rightPinPrickCanBeAbsent &&\r\n    leftLightTouchCanBeAbsent && leftPinPrickCanBeAbsent\r\n  ) {\r\n    if (\r\n      exam.voluntaryAnalContraction === 'No' && exam.deepAnalPressure === 'No'\r\n    ) {\r\n      if ([\r\n        exam.right.lightTouch.S4_5,\r\n        exam.right.pinPrick.S4_5,\r\n        exam.left.lightTouch.S4_5,\r\n        exam.left.pinPrick.S4_5\r\n      ].every(v => v === '0')) {\r\n        return 'C';\r\n      } else if ([\r\n        exam.right.lightTouch.S4_5,\r\n        exam.right.pinPrick.S4_5,\r\n        exam.left.lightTouch.S4_5,\r\n        exam.left.pinPrick.S4_5\r\n      ].every(v => ['0','0*'].includes(v))){\r\n        return 'C*,I*';\r\n      }\r\n    }\r\n    return 'C,I';\r\n  } else {\r\n    // return 'I';\r\n    if (exam.voluntaryAnalContraction === 'No' && exam.deepAnalPressure === 'No' && [\r\n      exam.right.lightTouch.S4_5,\r\n      exam.right.pinPrick.S4_5,\r\n      exam.left.lightTouch.S4_5,\r\n      exam.left.pinPrick.S4_5\r\n    ].every(v => ['0','0**'].includes(v))) {\r\n      return 'I*';\r\n    } else {\r\n      return 'I';\r\n    }\r\n  }\r\n}","import { levelIsBetween } from \"../common\";\r\nimport { MotorLevels, Exam } from \"../../interfaces\";\r\n\r\nexport type CheckAISResult = {result: boolean; variable: boolean};\r\n\r\nexport const startingMotorIndex = (sensoryIndex: number): number => {\r\n  return levelIsBetween(sensoryIndex, 'C2', 'C4') ? 0 :\r\n    levelIsBetween(sensoryIndex, 'C5', 'T1') ? sensoryIndex - 4 :\r\n      levelIsBetween(sensoryIndex, 'T2', 'L1') ? 5 :\r\n        levelIsBetween(sensoryIndex, 'L2', 'S1') ? sensoryIndex - 16 : MotorLevels.length;\r\n}\r\n\r\nexport const isSensoryPreserved = (exam: Exam): CheckAISResult => {\r\n  const sensoryAtS45 = [\r\n    exam.right.lightTouch.S4_5,\r\n    exam.right.pinPrick.S4_5,\r\n    exam.left.lightTouch.S4_5,\r\n    exam.left.pinPrick.S4_5,\r\n  ];\r\n  return {\r\n    result: exam.deepAnalPressure !== 'No' ||\r\n      exam.right.lightTouch.S4_5 !== '0' || exam.right.pinPrick.S4_5 !== '0' ||\r\n      exam.left.lightTouch.S4_5 !== '0' || exam.left.pinPrick.S4_5 !== '0',\r\n    variable: exam.deepAnalPressure === 'No' && !sensoryAtS45.every(v => v === '0') && sensoryAtS45.every(v => ['0', '0*', '0**'].includes(v)),\r\n  };\r\n}","import { InjuryComplete } from \"../../../interfaces\";\r\n\r\nconst canBeInjuryComplete = (injuryComplete: InjuryComplete): boolean => injuryComplete.includes('C');\r\n\r\nexport const checkASIAImpairmentScaleA = (injuryComplete: InjuryComplete): 'A' | 'A*' | undefined => {\r\n  if (canBeInjuryComplete(injuryComplete)) {\r\n    if (injuryComplete.includes('*')) {\r\n      return 'A*';\r\n    } else {\r\n      return 'A';\r\n    }\r\n  }\r\n}","import { MotorMuscleValue, Exam, Motor, SensoryLevel, SensoryLevels, MotorLevels, NeurologicalLevels, MotorLevel } from \"../../../interfaces\";\r\nimport { CheckAISResult, isSensoryPreserved, startingMotorIndex } from \"../common\";\r\n\r\n/**\r\n * ```!['0', 'NT', 'NT*', '0*'].includes(value)```\r\n */\r\nconst canBeNoPreservedMotor = (value: MotorMuscleValue): boolean => !['0', 'NT', 'NT*', '0*'].includes(value);\r\n\r\nconst canHaveNoMotorFunctionMoreThanThreeLevelsBelow = (motor: Motor, motorLevel: string, lowestNonKeyMuscleWithMotorFunction?: MotorLevel): CheckAISResult => {\r\n  let variable = false;\r\n\r\n  for (const m of motorLevel.split(',')) {\r\n    const index = m === 'INT' || m === 'INT*' ? SensoryLevels.indexOf('S4_5') : SensoryLevels.indexOf(m.replace('*', '') as SensoryLevel) + 4;\r\n\r\n    const startingIndex = startingMotorIndex(index);\r\n\r\n    let thereCanBeNoMotorFunction = true;\r\n    for (let i = startingIndex; i < MotorLevels.length; i++) {\r\n      const level = MotorLevels[i];\r\n      if (motor[level] === '0*' || motor[level] === '0**') {\r\n        variable = true;\r\n      }\r\n      if (canBeNoPreservedMotor(motor[level]) || level === lowestNonKeyMuscleWithMotorFunction) {\r\n        thereCanBeNoMotorFunction = false;\r\n        if (motor[level] === '0*') {\r\n          variable = true;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (thereCanBeNoMotorFunction) {\r\n      return {\r\n        result: true,\r\n        variable,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    result: false,\r\n    variable: false,\r\n  };\r\n}\r\n\r\nconst motorCanBeNotPreserved = (exam: Exam, neurologicalLevels: NeurologicalLevels): CheckAISResult => {\r\n  const leftMotorFunctionResult = canHaveNoMotorFunctionMoreThanThreeLevelsBelow(exam.left.motor, neurologicalLevels.motorLeft, exam.left.lowestNonKeyMuscleWithMotorFunction );\r\n  const rightMotorFunctionResult = canHaveNoMotorFunctionMoreThanThreeLevelsBelow(exam.right.motor, neurologicalLevels.motorRight, exam.right.lowestNonKeyMuscleWithMotorFunction);\r\n  return {\r\n    result: exam.voluntaryAnalContraction !== 'Yes' &&\r\n      rightMotorFunctionResult.result &&\r\n      leftMotorFunctionResult.result,\r\n    variable: exam.voluntaryAnalContraction === 'No' &&\r\n      (leftMotorFunctionResult.variable || rightMotorFunctionResult.variable),\r\n  };\r\n}\r\n\r\n/**\r\n * Check AIS can be B i.e. Is injury Motor Complete?\r\n */\r\nexport const canBeSensoryIncomplete = (exam: Exam, neurologicalLevels: NeurologicalLevels): CheckAISResult => {\r\n  const isSensoryPreservedResult = isSensoryPreserved(exam);\r\n  const motorCanBeNotPreservedResult = motorCanBeNotPreserved(exam, neurologicalLevels);\r\n  return {\r\n    result: isSensoryPreservedResult.result && motorCanBeNotPreservedResult.result,\r\n    variable: isSensoryPreservedResult.variable || motorCanBeNotPreservedResult.variable,\r\n  };\r\n}\r\n\r\nexport const checkASIAImpairmentScaleB = (exam: Exam, neurologicalLevels: NeurologicalLevels): 'B' | 'B*' | undefined => {\r\n  const canBeSensoryIncompleteResult = canBeSensoryIncomplete(exam, neurologicalLevels);\r\n  if (canBeSensoryIncompleteResult.result) {\r\n    if (canBeSensoryIncompleteResult.variable) {\r\n      return 'B*';\r\n    } else {\r\n      return 'B';\r\n    }\r\n  }\r\n}","import { MotorMuscleValue, SensoryLevel, SensoryLevels, MotorLevels, Exam } from \"../../../interfaces\";\r\nimport { startingMotorIndex, CheckAISResult } from \"../common\";\r\n\r\nconst canHaveMuscleGradeLessThan3 = (value: MotorMuscleValue): boolean  => ['0', '1', '2', 'NT', 'NT*'].includes(value);\r\nconst canHaveVariableMuscleGradeLessThan3 = (value: MotorMuscleValue): boolean  => ['0*', '1*', '2*'].includes(value);\r\n\r\n/**\r\n * Means in other words more than half of key muscles below NLI can have MuscleGradeLessThan3\r\n */\r\nconst canHaveLessThanHalfOfKeyMuscleFunctionsBelowNLIHaveMuscleGradeAtLeast3 = (exam: Exam, neurologicalLevelOfInjury: string): CheckAISResult => {\r\n  for (const nli of neurologicalLevelOfInjury.replace(/\\*/g, '').split(',')) {\r\n    const indexOfNLI = nli === 'INT' || nli === 'INT*' ? SensoryLevels.indexOf('S4_5') : SensoryLevels.indexOf(nli as SensoryLevel);\r\n    const startIndex = startingMotorIndex(indexOfNLI + 1);\r\n\r\n    const half = MotorLevels.length - startIndex;\r\n    let count = 0;\r\n    let variableCount = 0;\r\n    for (let i = startIndex; i < MotorLevels.length; i++) {\r\n      const level = MotorLevels[i];\r\n\r\n      if (canHaveMuscleGradeLessThan3(exam.left.motor[level])) {\r\n        count++;\r\n      } else if (canHaveVariableMuscleGradeLessThan3(exam.left.motor[level])) {\r\n        count++;\r\n        variableCount++;\r\n      }\r\n      if (canHaveMuscleGradeLessThan3(exam.right.motor[level])) {\r\n        count++;\r\n      } else if (canHaveVariableMuscleGradeLessThan3(exam.right.motor[level])) {\r\n        count++;\r\n        variableCount++;\r\n      }\r\n      if (count - variableCount > half) {\r\n        return {\r\n          result: true,\r\n          variable: false,\r\n        };\r\n      }\r\n    }\r\n    if (count > half && count - variableCount <= half) {\r\n      return {\r\n        result: true,\r\n        variable: true,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    result: false,\r\n    variable: false,\r\n  };\r\n}\r\n\r\nexport const checkASIAImpairmentScaleC = (exam: Exam, neurologicalLevelOfInjury: string, canBeMotorIncompleteResult: CheckAISResult): 'C' | 'C*' | undefined  => {\r\n  const motorFunctionC = canHaveLessThanHalfOfKeyMuscleFunctionsBelowNLIHaveMuscleGradeAtLeast3(exam, neurologicalLevelOfInjury);\r\n  if (motorFunctionC.result) {\r\n    if (motorFunctionC.variable || canBeMotorIncompleteResult.variable) {\r\n      return 'C*';\r\n    } else {\r\n      return 'C';\r\n    }\r\n  }\r\n}","import { MotorMuscleValue, SensoryLevel, SensoryLevels, MotorLevels, Exam } from \"../../../interfaces\";\r\nimport { startingMotorIndex, CheckAISResult } from \"../common\";\r\n\r\n/**\r\n * ```!['0', '1', '2'].includes(value)```\r\n */\r\nconst canHaveMuscleGradeAtLeast3 = (value: MotorMuscleValue): boolean  => !['0', '1', '2'].includes(value);\r\n\r\n/**\r\n * ```['0*', '1*', '2*', '0**', '1**', '2**'].includes(value)```\r\n */\r\nconst canHaveVariableMuscleGradeAtLeast3 = (value: MotorMuscleValue): boolean  => ['0*', '1*', '2*', '0**', '1**', '2**'].includes(value);\r\n\r\nconst canHaveAtLeastHalfOfKeyMuscleFunctionsBelowNLIHaveMuscleGradeAtLeast3 = (exam: Exam, neurologicalLevelOfInjury: string): CheckAISResult => {\r\n  const result = {\r\n    result: false,\r\n    variable: false,\r\n  };\r\n  for (const nli of neurologicalLevelOfInjury.replace(/\\*/g, '').split(',')) {\r\n    if (nli === 'INT') {\r\n      break;\r\n    }\r\n    const indexOfNLI = SensoryLevels.indexOf(nli as SensoryLevel);\r\n    const startIndex = startingMotorIndex(indexOfNLI + 1);\r\n\r\n    const half = MotorLevels.length - startIndex;\r\n    if (half === 0) {\r\n      return {\r\n        result: true,\r\n        variable: false,\r\n      };\r\n    }\r\n    let count = 0;\r\n    let variableCount = 0;\r\n    for (let i = startIndex; i < MotorLevels.length; i++) {\r\n      const level = MotorLevels[i];\r\n      count += canHaveMuscleGradeAtLeast3(exam.left.motor[level]) ? 1 : 0;\r\n      count += canHaveMuscleGradeAtLeast3(exam.right.motor[level]) ? 1 : 0;\r\n      variableCount += canHaveVariableMuscleGradeAtLeast3(exam.left.motor[level]) ? 1 : 0;\r\n      variableCount += canHaveVariableMuscleGradeAtLeast3(exam.right.motor[level]) ? 1 : 0;\r\n      if (count - variableCount >= half) {\r\n        return {\r\n          result: true,\r\n          variable: false,\r\n        };\r\n      }\r\n    }\r\n    if (count >= half) {\r\n      result.result = true;\r\n      result.variable = result.variable || count - variableCount < half;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const checkASIAImpairmentScaleD = (exam: Exam, neurologicalLevelOfInjury: string, canBeMotorIncompleteResult: CheckAISResult): 'D' | 'D*' | undefined => {\r\n  const motorFunctionD = canHaveAtLeastHalfOfKeyMuscleFunctionsBelowNLIHaveMuscleGradeAtLeast3(exam, neurologicalLevelOfInjury);\r\n  if (motorFunctionD.result) {\r\n    if (motorFunctionD.variable || canBeMotorIncompleteResult.variable) {\r\n      return 'D*';\r\n    } else {\r\n      return 'D';\r\n    }\r\n  }\r\n}","import { BinaryObservation } from \"../../../interfaces\";\r\n\r\nexport const checkASIAImpairmentScaleE = (neurologicalLevelOfInjury: string, voluntaryAnalContraction: BinaryObservation): 'E' | 'E*' | undefined => {\r\n  if (voluntaryAnalContraction !== 'No') {\r\n    if (neurologicalLevelOfInjury.includes('INT*')) {\r\n      return 'E*';\r\n    } else if (neurologicalLevelOfInjury.includes('INT')) {\r\n      return 'E';\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n}","import { Exam, InjuryComplete, Motor, MotorLevels, NeurologicalLevels, SensoryLevel, SensoryLevels, MotorLevel } from \"../../interfaces\";\r\nimport { startingMotorIndex, CheckAISResult, isSensoryPreserved } from \"./common\";\r\nimport { checkASIAImpairmentScaleA } from \"./scale/A\";\r\nimport { checkASIAImpairmentScaleB } from \"./scale/B\";\r\nimport { checkASIAImpairmentScaleC } from \"./scale/C\";\r\nimport { checkASIAImpairmentScaleD } from \"./scale/D\";\r\nimport { checkASIAImpairmentScaleE } from \"./scale/E\";\r\n\r\n/**\r\n * exam.voluntaryAnalContraction !== 'No'\r\n */\r\nconst motorFunctionCanBePreserved = (exam: Exam): boolean => exam.voluntaryAnalContraction !== 'No';\r\n\r\nconst canHaveMotorFunctionMoreThanThreeLevelsBelow = (motor: Motor, motorLevel: string, lowestNonKeyMuscleWithMotorFunction?: MotorLevel): CheckAISResult => {\r\n  let variable = false;\r\n  for (const m of motorLevel.split(',')) {\r\n    const index = m === 'INT' || m === 'INT*' ? SensoryLevels.indexOf('S4_5') : SensoryLevels.indexOf(m.replace('*', '') as SensoryLevel) + 4;\r\n\r\n    const startingIndex = startingMotorIndex(index);\r\n\r\n    for (let i = startingIndex; i < MotorLevels.length; i++) {\r\n      const level = MotorLevels[i];\r\n      if (motor[level] === '0**') {\r\n        variable = true;\r\n      }\r\n      if (motor[level] !== '0' || level === lowestNonKeyMuscleWithMotorFunction) {\r\n        return {\r\n          result: true,\r\n          variable,\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    result: variable,\r\n    variable,\r\n  };\r\n}\r\n\r\nexport const canBeMotorIncomplete = (exam: Exam, neurologicalLevels: NeurologicalLevels): CheckAISResult => {\r\n  const result: CheckAISResult = {\r\n    result: false,\r\n    variable: false,\r\n  };\r\n\r\n  if (motorFunctionCanBePreserved(exam)) {\r\n    result.result = true;\r\n    return result;\r\n  }\r\n\r\n  const isSensoryPreservedResult = isSensoryPreserved(exam);\r\n  if (isSensoryPreservedResult.result) {\r\n    const rightMotorFunctionResult = canHaveMotorFunctionMoreThanThreeLevelsBelow(exam.right.motor, neurologicalLevels.motorRight, exam.right.lowestNonKeyMuscleWithMotorFunction);\r\n    const leftMotorFunctionResult = canHaveMotorFunctionMoreThanThreeLevelsBelow(exam.left.motor, neurologicalLevels.motorLeft, exam.left.lowestNonKeyMuscleWithMotorFunction);\r\n    if (rightMotorFunctionResult.result || leftMotorFunctionResult.result) {\r\n      result.result = true;\r\n      if (rightMotorFunctionResult.variable || leftMotorFunctionResult.variable) {\r\n        result.variable = true;\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const determineASIAImpairmentScale = (exam: Exam, injuryComplete: InjuryComplete, neurologicalLevels: NeurologicalLevels, neurologicalLevelOfInjury: string): string => {\r\n  // check isNormal because description of canBeMotorIncompleteD overlaps on canBeNormal\r\n  if (neurologicalLevelOfInjury === 'INT' && exam.voluntaryAnalContraction === 'Yes') {\r\n    return 'E';\r\n  } else if (neurologicalLevelOfInjury === 'INT*' && exam.voluntaryAnalContraction === 'Yes') {\r\n    return 'E*';\r\n  } else {\r\n    const possibleASIAImpairmentScales: string[] = [];\r\n\r\n    const resultA = checkASIAImpairmentScaleA(injuryComplete);\r\n    if (resultA) {\r\n      possibleASIAImpairmentScales.push(resultA);\r\n    }\r\n\r\n    const resultB = checkASIAImpairmentScaleB(exam, neurologicalLevels);\r\n    if (resultB) {\r\n      possibleASIAImpairmentScales.push(resultB);\r\n    }\r\n\r\n    const canBeMotorIncompleteResult = canBeMotorIncomplete(exam, neurologicalLevels);\r\n    if (canBeMotorIncompleteResult.result) {\r\n      const resultC = checkASIAImpairmentScaleC(exam, neurologicalLevelOfInjury, canBeMotorIncompleteResult);\r\n      if (resultC) {\r\n        possibleASIAImpairmentScales.push(resultC);\r\n      }\r\n\r\n      const resultD = checkASIAImpairmentScaleD(exam, neurologicalLevelOfInjury, canBeMotorIncompleteResult);\r\n      if (resultD) {\r\n        possibleASIAImpairmentScales.push(resultD);\r\n      }\r\n    }\r\n\r\n    const resultE = checkASIAImpairmentScaleE(neurologicalLevelOfInjury, exam.voluntaryAnalContraction);\r\n    if (resultE) {\r\n      possibleASIAImpairmentScales.push(resultE);\r\n    }\r\n\r\n    return possibleASIAImpairmentScales.join(',');\r\n  }\r\n}","import { Classification, Exam } from '../interfaces';\r\nimport { determineNeurologicalLevels } from './neurologicalLevels';\r\nimport { determineZoneOfPartialPreservations } from './zoneOfPartialPreservation';\r\nimport { determineNeurologicalLevelOfInjury } from './neurologicalLevelOfInjury/neurologicalLevelOfInjury';\r\nimport { determineInjuryComplete } from './injuryComplete/injuryComplete';\r\nimport { determineASIAImpairmentScale } from './asiaImpairmentScale/asiaImpairmentScale';\r\n\r\nexport const classify = (exam: Exam): Classification => {\r\n  const neurologicalLevels = determineNeurologicalLevels(exam);\r\n  const neurologicalLevelOfInjury = determineNeurologicalLevelOfInjury(exam);\r\n  const injuryComplete = determineInjuryComplete(exam);\r\n  const ASIAImpairmentScale = determineASIAImpairmentScale(exam, injuryComplete, neurologicalLevels, neurologicalLevelOfInjury);\r\n  const zoneOfPartialPreservations = determineZoneOfPartialPreservations(exam, ASIAImpairmentScale);\r\n  return { neurologicalLevels, neurologicalLevelOfInjury, injuryComplete, ASIAImpairmentScale, zoneOfPartialPreservations };\r\n}\r\n","import { Exam, ExamSide, Motor, Sensory, SideTotals, Totals } from '../interfaces';\r\n\r\nconst NOT_DETERMINABLE = 'ND';\r\n\r\nexport const addValues = (...values: number[]): string => {\r\n  if (values.includes(NaN)) {\r\n    throw `${values[values.indexOf(NaN)]} is not a valid value`;\r\n  }\r\n  const sum = values.reduce((sum, v) => sum += v, 0);\r\n  return sum.toString();\r\n}\r\n\r\nexport const calculateMotorTotal = (motor: Motor, option: 'all' | 'upper' | 'lower'): string => {\r\n  let values;\r\n\r\n  if (option === 'all') {\r\n    values = Object.values(motor);\r\n  } else if (option === 'upper') {\r\n    values = [ motor.C5, motor.C6, motor.C7, motor.C8, motor.T1 ];\r\n  } else if (option === 'lower') {\r\n    values = [ motor.L2, motor.L3, motor.L4, motor.L5, motor.S1 ];\r\n  }\r\n\r\n  if (!values) {\r\n    throw `option should be one of 'all' | 'upper' | 'lower'`;\r\n  }\r\n\r\n  if (values.some(v => ['NT', 'NT*','NT**'].includes(v))) {\r\n    return NOT_DETERMINABLE;\r\n  } else {\r\n    const total = addValues(...values.map(v => parseInt(v.replace(/\\*/g, ''))));\r\n    return total;\r\n  }\r\n}\r\n\r\nexport const calculateSensoryTotal = (sensory: Sensory): string => {\r\n  const values = Object.values(sensory);\r\n  if (values.some(v => ['NT','NT*','NT**'].includes(v))) {\r\n    return NOT_DETERMINABLE;\r\n  } else {\r\n    const total = addValues(...values.map(v => parseInt(v.replace(/\\*/g, ''))));\r\n    return total;\r\n  }\r\n}\r\n\r\nconst addTotals =  (...values: string[]): string => {\r\n  if (values.includes(NOT_DETERMINABLE)) {\r\n    return NOT_DETERMINABLE;\r\n  } else {\r\n    const total = addValues(...values.map(v => parseInt(v.replace(/\\*/g, ''))));\r\n    return total + (values.some(v => v.includes('*')) ? '*' : '');\r\n  }\r\n}\r\n\r\nexport const calculateSideTotals = (side: ExamSide): SideTotals => {\r\n  const motor = calculateMotorTotal(side.motor, 'all');\r\n  const upperExtremity = calculateMotorTotal(side.motor, 'upper');\r\n  const lowerExtremity = calculateMotorTotal(side.motor, 'lower');\r\n  const lightTouch = calculateSensoryTotal(side.lightTouch);\r\n  const pinPrick = calculateSensoryTotal(side.pinPrick);\r\n\r\n  return {upperExtremity, lowerExtremity, lightTouch, pinPrick, motor};\r\n}\r\n\r\nexport const calculateTotals = (exam: Exam): Totals => {\r\n  const left = calculateSideTotals(exam.left);\r\n  const right = calculateSideTotals(exam.right);\r\n\r\n  const upperExtremity = addTotals(right.upperExtremity, left.upperExtremity);\r\n  const lowerExtremity = addTotals(right.lowerExtremity, left.lowerExtremity);\r\n  const lightTouch = addTotals(right.lightTouch, left.lightTouch);\r\n  const pinPrick = addTotals(right.pinPrick, left.pinPrick);\r\n\r\n  return {\r\n    left,\r\n    right,\r\n    upperExtremity,\r\n    lowerExtremity,\r\n    lightTouch,\r\n    pinPrick,\r\n  };\r\n}","import { Classification, Exam, Totals } from './interfaces';\r\nimport { classify } from './classification';\r\nimport { calculateTotals } from './totals/totals';\r\n\r\nclass ISNCSCI {\r\n  public classification: Classification;\r\n  public totals: Totals;\r\n  constructor(exam: Exam) {\r\n    this.classification = classify(exam);\r\n    this.totals = calculateTotals(exam);\r\n  }\r\n}\r\n\r\nexport { Exam, ISNCSCI };\r\nexport default ISNCSCI;"],"names":[],"mappings":"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"}